services:
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: sungai-backend:latest
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./backend/.env:/app/.env:ro
      - backend-logs:/app/logs
    environment:
      - ENV_MODE=${ENV_MODE:-production}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_SSL=False
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  backend-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: sungai-backend:latest
    volumes:
      - ./backend/.env:/app/.env:ro
      - backend-logs:/app/logs
    environment:
      - ENV_MODE=${ENV_MODE:-production}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_SSL=False
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    depends_on:
      - backend
      - redis
      - rabbitmq
    restart: unless-stopped
    command: ["python", "-m", "dramatiq", "run_agent_background"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: sungai-frontend:latest
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    volumes:
      - ./frontend/.env.local:/app/.env.local:ro
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BACKEND_URL=http://backend:8000/api
      - NEXT_PUBLIC_URL=http://localhost:${FRONTEND_PORT:-3001}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  redis-data:
    name: sungai_redis_data
  rabbitmq_data:
    name: sungai_rabbitmq_data
  backend-logs:
    name: sungai_backend_logs